---
title: Going Deeper with R
format:
  rfortherestofus-slides-revealjs:
    menu: false
    progress: false
    slide-number: true
    show-slide-number: print
    center: true
    incremental: true
    auto-animate: true
execute: 
  message: false
  warning: false
  cache: true
title-slide-attributes:
  data-background-image: assets/rru-hex-bg-gradient-dark.svg
  data-background-size: cover
editor_options: 
  chunk_output_type: console
knitr:
  opts_chunk: 
    dev: ragg_png
---


```{r}
#| echo: false

library(tidyverse)
library(readxl)
library(janitor)
library(here)
library(gt)
library(rmarkdown)
library(palmerpenguins)
library(ggtext)
library(scales)
library(ggrepel)
```


# Downloading and Importing Data {.inverse background-image="assets/data.jpg"}

## Downloading Data Directly {.inverse}

## Downloading Data Directly

The `download.file()` function lets us download files directly from websites.

::: {.fragment}
```{r}
#| eval: false
#| echo: true

download.file(url = "https://example.com/data.xlsx", 
              mode = "wb",
              destfile = "data-raw/data.xlsx")
```
:::

::: {.notes}
Benefit = reproducibility
:::

## Importing Excel Files {.inverse}

---

![](assets/readxl-logo.png){fig-align="center"}


## Importing Excel Files

::: {.small}
```{r}
#| eval: false
library(readxl)

data_frame <- read_excel(path = "directory_name/file_name.xlsx",
                         sheet = "name of sheet")
```
:::

## Importing Excel Files

```{r}
#| echo: false
german_speakers <- read_excel(path = here("data-raw", "german-and-french-speakers.xlsx"),
                              sheet = "German speakers") |> 
  clean_names()
```


```{r}
#| eval: false
#| echo: true
german_speakers <- read_excel(path = "data-raw/german-and-french-speakers.xlsx",
                              sheet = "German speakers") |> 
  clean_names()
```

---

```{r}
#| echo: true
german_speakers
```

## Other Packages for Importing Data {.inverse}

---

![](assets/googlesheets4.svg){fig-align="center"}

---

![](assets/haven.svg){fig-align="center"}

---

![](assets/rio-logo.png){fig-align="center"}

## My Turn {.my-turn}

Working with [data on third grade math proficiency in Oregon schools](https://www.oregon.gov/ode/educator-resources/assessment/Pages/Assessment-Group-Reports.aspx), I'll do the following:

1. Create a new project

1. Create a new R script file where I'll do all of my data downloading, cleaning, and importing work

## My Turn, Continued {.my-turn}

3. Download the five most recent math proficiency scores (from 2015-2016 to 2018-2019 as well as 2021-2022) and put them in a `data-raw` folder

4. Import the 2021-2022 data into a data frame called `math_scores_2021_2022` using the `clean_names()` function from the `janitor` package to make our variable names easy to work with


## Your Turn {.your-turn}

You'll be working with data on [Oregon school enrollment by race/ethnicity](https://www.oregon.gov/ode/reports-and-data/students/Pages/Student-Enrollment-Reports.aspx).

1. Create a new project. Make sure you put it somewhere you'll be able to find it again later!

1. Create a new R script file where you'll do all of your data downloading, cleaning, and importing work.

## Your Turn, Continued {.your-turn}

3. Download the five most recent Fall Membership Report files using the `download.file()` function into a `data-raw` folder (which you'll need to create).

4. Import the 2022-2023 spreadsheet into a data frame called `enrollment_2022_2023`, using the `clean_names()` function from the `janitor` package to make our variable names easy to work with.


# Overview of Tidy Data {.inverse background-image="assets/berries.jpg"}


---

![](assets/tidy-workflow.png)



## Untidy Data

```{r}
#| echo: false
german_speakers_numeric <- read_excel(path = here("data-raw", "german-and-french-speakers.xlsx"),
                                      sheet = "German speakers",
                                      na = "-") |>
  clean_names()
```


```{r}
#| eval: false
#| echo: true
german_speakers_numeric <- read_excel(path = "data-raw/german-and-french-speakers.xlsx",
                                      sheet = "German speakers",
                                      na = "-") |>
  clean_names()
```

---

```{r}
#| echo: true
german_speakers_numeric
```



## Untidy Data

```{r}
#| eval: true
#| echo: true
german_speakers_numeric |>
  mutate(total = number_of_german_speakers_2017 + 
           number_of_german_speakers_2018 + 
           number_of_german_speakers_2019) |>
  select(state, total)
```

::: {.notes}
But what if we have 10 or 20 years of data? Are we going to write out a all of those years individually?
:::


## Tidy Data


```{r}
#| echo: false
german_speakers_tidy <- german_speakers_numeric |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number")
```

```{r}
german_speakers_tidy
```



## Tidy Data


```{r}
#| echo: true
german_speakers_tidy |>
  group_by(state) |>
  summarize(total = sum(number, na.rm = TRUE))
```


::: {.notes}
The tidyverse wants data in a certain format: tidy. With data in this format, it becomes much easier to work with.
:::





## The Three Rules of Tidy Data

1. Every column is a variable.

1. Every row is an observation.

1. Every cell is a single value.


## My Turn {.my-turn}

Let's take a look at the math proficiency data and see which principles of tidy data it violates

## Your Turn {.your-turn}

Take a look at your data and see which principles of tidy data it violates

# Tidy Data Rule #1: Every Column is a Variable {.inverse}

---

```{r}
#| echo: true
german_speakers
```


## `pivot_longer()`


::: {.fragment}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2"
data_frame |>
  pivot_longer(cols = columns_to_use)
```
:::

<br>

::: {.fragment}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "3"
data_frame |>
  pivot_longer(cols = columns_to_use,
               names_to = "name_of_identifer_variable") 
```
:::

<br>

::: {.fragment}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4"
data_frame |>
  pivot_longer(cols = columns_to_use,
               names_to = "name_of_identifer_variable",
               values_to = "name_of_value_variable")
```
:::




## `pivot_longer()`

```{r}
#| echo: true
german_speakers
```



## `pivot_longer()`

```{r pivot_longer_example}
#| echo: true
#| output: false
german_speakers |>
  pivot_longer(cols = c(number_of_german_speakers_2017,
                        number_of_german_speakers_2018,
                        number_of_german_speakers_2019))
```


::: {.fragment}
```{r ref.label = "pivot_longer_example"}
#| echo: false
```
:::

## `pivot_longer()`

```{r pivot_longer_example2}
#| echo: true
#| output: false
german_speakers |>
  pivot_longer(cols = -state)
```



::: {.fragment}
```{r ref.label = "pivot_longer_example2"}
#| echo: false
```
:::



## `pivot_longer()`

```{r pivot_longer_example_2}
#| echo: true
#| output: false
#| code-line-numbers: "3,4"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year", 
               values_to = "number")
```

::: {.fragment}
```{r ref.label = "pivot_longer_example_2"}
#| echo: false
```
:::


## My Turn {.my-turn}

I'll do the following to create a new data frame called `third_grade_math_proficiency_2021_2022`:

1. Use `filter()` to only keep rows where the `student_group` variable is "Total Population (All Students)"

1. Use `filter()` to only keep third grade students

## My Turn, Continued {.my-turn}

3. Use `select()` to only keep the `year` and `school_id` variables as well as all variables related to the **number** (not percentage) of students who are proficient in math

4. Use `pivot_longer()` to make my data frame tidy


## Your Turn {.your-turn}

Do the following to create a new data frame called `enrollment_by_race_ethnicity_2022_2023`:

1. Start with the `enrollment_2022_2023` data frame.

1. `select()` the `district_institution_id` and `school_institution_id` variables as well as those about number of students by race/ethnicity and get rid of all others.

## Your Turn, Continued {.your-turn}

3. Use `pivot_longer()` to convert all of the race/ethnicity variables into one variable.

4. Within `pivot_longer()`, use the `names_to` argument to call that variable `race_ethnicity`.

5. Within `pivot_longer()`, use the `values_to` argument to call that variable `number_of_students`.


# Tidy Data Rule #3: Every Cell is a Single Value {.inverse}

::: {.notes}
These are also just good data wrangling functions
:::

## Every Cell is a Single Value

```{r}
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year", 
               values_to = "number") 
```

## `str_remove()`

```{r}
#| eval: false
#| echo: true
data_frame |>
  mutate(variable = str_remove(variable, 
                               pattern = "text to remove"))
```

## `str_remove()`


```{r str_remove-example}
#| echo: true
#| eval: false
#| code-line-numbers: "5"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(year = str_remove(year, "number_of_german_speakers_"))
```

::: {.notes}
Mention there are a whole bunch of other stringr functions
:::


## `str_remove()`

```{r ref.label = "str_remove-example"}
#| echo: true
```


## `recode()`

```{r}
#| eval: false
#| echo: true
data_frame |>
  mutate(variable = recode(variable, "old_value" = "new_value"))
```

## `recode()`


```{r recode-example}
#| echo: true
#| eval: false
#| code-line-numbers: "5,6,7,8"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(year = recode(year,
                       "number_of_german_speakers_2017" = "2017", 
                       "number_of_german_speakers_2018" = "2018", 
                       "number_of_german_speakers_2019" = "2019"))
```



## `recode()`

```{r ref.label = "recode-example"}
#| echo: true
```



## `if_else()`

```{r}
#| eval: false
#| echo: true
data_frame |>
  mutate(variable = if_else(variable == "some_value",
                            true = "if_true_value",
                            false = "else_value"))
```



## `if_else()`

```{r if_else-example}
#| echo: true
#| eval: false
#| code-line-numbers: "5,6,7,8,9,10,11,12,13"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(year = if_else(year == "number_of_german_speakers_2017", 
                        true = "2017", 
                        false = year)) |> 
  mutate(year = if_else(year == "number_of_german_speakers_2018", 
                        true = "2018", 
                        false = year)) |> 
  mutate(year = if_else(year == "number_of_german_speakers_2019", 
                        true = "2019", 
                        false = year)) 
```

## `if_else()`

```{r ref.label = "if_else-example"}
#| echo: true
```




## `case_when()`

```{r}
#| echo: true
#| eval: false
data_frame |>
  mutate(variable = case_when(
    variable == "some_value" ~ "new_value",
    variable == "some_other_value" ~ "new_value_2",
    variable == "some_third_value" ~ "new_value_3",
    .default ~ "value_for_all_observations_that_dont_match_any_above_criteria"
  ))
```


## `case_when()`

```{r case_when-example}
#| echo: true
#| eval: false
#| code-line-numbers: "5,6,7,8,9"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(year = case_when(
    year == "number_of_german_speakers_2017" ~ "2017", 
    year == "number_of_german_speakers_2018" ~ "2018", 
    year == "number_of_german_speakers_2019" ~ "2019" 
  )) 
```

## `case_when()`

```{r ref.label = "case_when-example"}
#| echo: true
```






---

![](assets/parse_number.png){fig-align="center"}

::: {.center-slide .small}
Image courtesy of [Allison Horst](https://github.com/allisonhorst/stats-illustrations)
:::


## `parse_number()`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2"
data_frame |>
  mutate(variable = parse_number(variable))
```



## `parse_number()`

```{r parse_number-example}
#| echo: true
#| eval: false
#| code-line-numbers: "5"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(year = parse_number(year)) 
```



## `parse_number()`

```{r ref.label = "parse_number-example"}
#| echo: true
```

## My Turn {.my-turn}

I'll convert all instances of the `proficiency_level` variable to more meaningful observations using:

1. `str_remove()`

1. `recode()`

1. `if_else()`

1. `case_when()`

1. `parse_number()`


## Your Turn {.your-turn}

1. Remove the "x2022_23_" portion of the `race_ethnicity` variable using `str_remove()`.

1. Convert all instances of the `race_ethnicity` variable to more meaningful observations (e.g. turn "american_indian_alaska_native" into "American Indian/Alaska Native") using `recode()`, `if_else()`, or `case_when()`.

## Your Turn, Continued {.your-turn}

3. Add your code to the pipeline where you initially create `enrollment_by_race_ethnicity_2022_2023`. You only need to use one of the options of `recode()`, `if_else()`, or `case_when()` for this.

# Tidy Data Rule #2: Every Row is an Observation {.inverse}

## Select All That Apply Questions Often Break This Rule

![](assets/google-form.png)

## Every Row is an Observation

```{r}
#| echo: false
activities_survey <- read_excel(here("data-raw", "google-forms-data.xlsx")) |> 
  clean_names() |> 
  rename(activities = select_all_the_things_youve_done_in_the_past_24hours) |> 
  select(-timestamp) |> 
  mutate(respondent_id = row_number(),
         .before = 1)
```

```{r}
#| eval: true
#| echo: true
activities_survey
```

## What is Our Unit of Analysis?

Right now: 

- **one row = one individual**

::: {.fragment}
But if we care about activities, we need:
:::


- **one row = one activity**


## `separate_longer_delim()`

```{r separate_longer}
#| echo: true
#| eval: false
#| code-line-numbers: "2,3"
activities_survey |> 
  separate_longer_delim(cols = activities,
                        delim = ", ")
```

## `separate_longer_delim()`

```{r ref.label="separate_longer"}
#| echo: true
```

## Before We Couldn't Easily Count Responses

```{r}
activities_survey
```


## Now We Can!

```{r}
#| echo: true
activities_survey |> 
  separate_longer_delim(cols = activities,
                        delim = ", ") |> 
  count(activities)
```

## Your Turn {.your-turn}

- Run the following code to view the built-in `gss_cat` data frame. 

::: {.fragment}
```{r}
#| echo: true

library(tidyverse)

gss_cat |> 
  view()
```
:::

- Then, write code to count the number of unique responses in the `partyid` variable.

- You'll need to use the `separate_longer_delim()` and `count()` functions to do this.



# Changing Variable Types {.inverse background-image="assets/types.jpg"}



## Changing Variable Types

```{r}
#| echo: true
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") 
```



## Changing Variable Types

```{r cant-sum}
#| eval: false
#| echo: true
#| code-line-numbers: "5"

german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  summarize(total = sum(number, na.rm = TRUE)) 
```

```{r ref.label="cant-sum"}
#| error: true
```




## Changing Variable Types

To change variable types, you use the `mutate()` function combined with `as.numeric()`, `as.character()`, etc.

```{r}
#| echo: true
#| code-line-numbers: "5"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = as.numeric(number)) |> 
  summarize(total = sum(number, na.rm = TRUE)) 
```


::: {.notes}
Point to https://github.com/davidsjoberg/hablar
:::

## Changing Variable Types

You can also use `parse_number()` to change the variable to numeric.

```{r}
#| echo: true
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = parse_number(number)) 
```



## My Turn {.my-turn}

1. Convert the `number_of_students` variable to numeric by using `as.numeric()` and `parse_number()`

1. Count the number of students at each proficiency level

## Your Turn {.your-turn}

1. Convert the `number_of_students` variable to numeric by using `as.numeric()` and `parse_number()`

1. Make sure you can use your `number_of_students` variable to count the total number of students in Oregon


# Dealing with Missing Data {.inverse background-image="assets/missing.jpg"}

## Use the `na` Argument When Importing Data

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "3"
math_scores_2021_2022 <-
  read_excel(path = "data-raw/pagr_schools_math_tot_raceethnicity_2122.xlsx",
             na = c("*", "-", "--")) |> 
  clean_names()
```


## `na_if()`

```{r}
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number")
```



## `na_if()`

```{r german_speakers_na_if}
#| eval: false
#| echo: true
#| code-line-numbers: "5"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = na_if(number, "-"))
```



## `na_if()`

```{r ref.label = "german_speakers_na_if"}
#| eval: true
#| echo: true
#| code-line-numbers: "5"
```


::: {.notes}
The `na_if()` function turns values that represent missing data into actual NAs
:::

## `replace_na()`


```{r replace_na_example}
#| eval: false
#| echo: true
#| code-line-numbers: "6"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = na_if(number, "-")) |>
  mutate(number = replace_na(number, "0"))
```


::: {.notes}
The `replace_na()` function does the opposite: turns NAs into values.
:::

## `replace_na()`


```{r ref.label = "replace_na_example"}
#| eval: true
#| echo: true
#| code-line-numbers: "6"
```

## My Turn {.my-turn}

Working with my data before I changed the `number_of_students` to numeric, I'll convert all of the missing values in the `number_of_students` variable to NA using `na_if()`

::: {.notes}
I don't have any values where using `replace_na()` makes sense, but you'll use it shortly!
:::



## Your Turn {.your-turn}

1. Convert all of the missing values in the `number_of_students` variable to NA using `na_if()`

1. Convert all of the NA values you just made to 0 using `replace_na()`.





# Advanced Summarizing {.inverse background-image="assets/summarize.jpg"}



## `group_by()` + `mutate()`

```{r group_by_mutate_example}
#| echo: true
#| eval: false
#| code-line-numbers: "7,8"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = parse_number(number)) |>
  mutate(year = parse_number(year)) |>
  group_by(year) |> 
  mutate(pct = number / sum(number, na.rm = TRUE)) |> 
  arrange(year, state)
```



## `group_by()` + `mutate()`

```{r ref.label = "group_by_mutate_example"}
#| echo: true
#| eval: true
#| code-line-numbers: "7,8"
```



## `ungroup()`

```{r group_by_mutate_no_ungroup}
#| echo: true
#| eval: false
#| code-line-numbers: "7,8,9"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = parse_number(number)) |>
  mutate(year = parse_number(year)) |>
  group_by(year) |> 
  mutate(pct = number / sum(number, na.rm = TRUE)) |>
  slice_max(order_by = pct, n = 1) |> 
  arrange(year, state)
```



## `ungroup()`

```{r ref.label = "group_by_mutate_no_ungroup"}
#| echo: true
#| eval: true
#| code-line-numbers: "7,8,9"
```



## `ungroup()`

```{r group_by_mutate_with_ungroup}
#| echo: true
#| eval: false
#| code-line-numbers: "9"
german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = parse_number(number)) |>
  mutate(year = parse_number(year)) |>
  group_by(year) |> 
  mutate(pct = number / sum(number, na.rm = TRUE)) |>
  ungroup() |> 
  slice_max(order_by = pct, n = 1) |> 
  arrange(year, state)
```



## `ungroup()`

```{r ref.label = "group_by_mutate_with_ungroup"}
#| echo: true
#| eval: true
#| code-line-numbers: "9"
```

## My Turn {.my-turn}

I'll calculate the percent of students at each school who are at each proficient level in math. 

And I can't forget to `ungroup()`!



## Your Turn {.your-turn}

::: {.fragment}
Create a new variable called `pct` that shows each race/ethnicity as a percentage of all students in each district. This will require two steps.
:::

1. Use `group_by()` and `summarize()` to calculate the number of students in each race/ethnicity group in each district. 

1. Use `group_by()` and `mutate()` to calculate the percentage of students in each race/ethnicity group in each district.

## Your Turn, Continued {.your-turn}

Don’t forget to `ungroup()` at the end of each step.




# Binding Data Frames {.inverse background-image="assets/bind.jpg"}



::: {.notes}
What if you want to do more than one year?

Discuss why bind_cols() doesn't give you tidy data
:::

## bind_rows()

```{r}
#| eval: true
#| echo: false
german_speakers_2019 <- german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = parse_number(number)) |>
  mutate(year = parse_number(year)) |>
  filter(year == 2019) 
```

```{r}
#| eval: true
#| echo: false
german_speakers_2018 <- german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = parse_number(number)) |>
  mutate(year = parse_number(year)) |>
  filter(year == 2018) 
```

:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: true
german_speakers_2018
```

:::

::: {.column width="50%"}
```{r}
#| echo: true
german_speakers_2019
```

:::

::::



## bind_rows()

```{r bind_rows_example}
#| echo: true
#| eval: false
bind_rows(german_speakers_2018, german_speakers_2019) 
```

## bind_rows()

```{r}
#| echo: false
#| eval: true
bind_rows(german_speakers_2018, german_speakers_2019) |> 
  paged_table()
```




## bind_cols()

```{r bind_cols_example}
#| echo: true
#| eval: false
bind_cols(german_speakers_2018, german_speakers_2019)
```



## bind_cols()

```{r ref.label="bind_cols_example"}
#| echo: true
#| eval: true
```




## My Turn {.my-turn}

I'll import 2018-2019 math proficiency data and then use `bind_rows()` to make a `third_grade_math_proficiency` data frame.

## Your Turn {.your-turn}

1. Import 2021-2022 enrollment data into a data frame called `enrollment_by_race_ethnicity_2021_2022` and clean it using the code you used for the 2022-2023 data. 

1. Add a `year` variable to the `enrollment_by_race_ethnicity_2021_2022` and `enrollment_by_race_ethnicity_2022_2023` data frames.

## Your Turn, Continued {.your-turn}

3. Use bind_rows() to make a `enrollment_by_race_ethnicity` data frame by combining the `enrollment_by_race_ethnicity_2021_2022` and `enrollment_by_race_ethnicity_2022_2023` data frames.

::: {.fragment}
You'll need to change bits of your code to make it work, including renaming variables so they are consistent across the two data frames. Use the starter code to help you.
:::

## Renaming Variables

## `rename()`

```{r}
#| eval: false
#| echo: true

data_frame |>
  rename(new_variable_name = old_variable_name)
```





## `set_names()`

```{r}
#| eval: false
#| echo: true

data_frame |>
  set_names("variable1", "variable2", "variable3")
```



# Functions {.inverse background-image="assets/code-heart.jpg"}

::: {.notes}
Show example of my turn and talk about if I want to add more years and/or change the code

Let's talk about the why and the when before we get into how functions work
:::

## When to Use Functions?

> A good rule of thumb is to consider writing a function whenever you’ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code)

::: {.small}
Source: Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund in [R for Data Science](https://r4ds.hadley.nz/functions#:~:text=A%20good%20rule%20of%20thumb%20is%20to%20consider%20writing%20a%20function%20whenever%20you%E2%80%99ve%20copied%20and%20pasted%20a%20block%20of%20code%20more%20than%20twice%20(i.e.%C2%A0you%20now%20have%20three%20copies%20of%20the%20same%20code))
:::


## Why Use Functions?

1. You can give a function an evocative name that makes your code easier to understand.

1. As requirements change, you only need to update code in one place, instead of many.

1. You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).

1. It makes it easier to reuse work from project-to-project, increasing your productivity over time.

::: {.fragment .small}
Source: [R for Data Science](https://r4ds.hadley.nz/functions#:~:text=You%20can%20give,productivity%20over%20time.)
:::



## How do Functions Work?


:::: {.columns}

::: {.column width="40%"}
::: {.fragment}
```{r}
#| echo: true
german_speakers_2018
```
:::
:::

::: {.column width="60%"}
::: {.fragment}
```{r}
#| eval: true
#| echo: true

find_most_german_speakers <- function() {
  
  german_speakers_2018 |> 
    slice_max(order_by = number,
              n = 1)
  
}
```
:::

<br>

::: {.fragment}
```{r}
#| echo: true

find_most_german_speakers()
```
:::
:::

::::









## Function Arguments

::: {.fragment}
```{r}
#| eval: true
#| echo: true

find_most_german_speakers <- function(df) {
  
  df |> 
    slice_max(order_by = number,
              n = 1)
  
}
```
:::

<br>

::: {.fragment}
```{r}
#| echo: true

find_most_german_speakers(df = german_speakers_2018)
```
:::

<br>

::: {.fragment}
```{r}
#| echo: true

find_most_german_speakers(df = german_speakers_2019)
```
:::






## My Turn {.my-turn}

I'll create a function to clean each year of math proficiency data, then use `bind_rows()` to bind them together.


## Your Turn {.your-turn}

1. Create a function to clean each year of enrollment data. 

1. To check that your function works, create `enrollment_by_race_ethnicity_2021_2022` and `enrollment_by_race_ethnicity_2022_2023` data frames and then bind them together with `bind_rows()`.

::: {.fragment}
This exercise is challenging! Use the starter code to help you if you need to. 
:::

::: {.notes}
- Need to select by position
- Need to use set_names() to give consistent variable names
:::






# Data Merging {.inverse background-image="assets/highway.jpg"}


---

```{r}
#| eval: true
#| echo: false
german_speakers_2019 <- german_speakers |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(number = parse_number(number)) |>
  mutate(year = parse_number(year)) |>
  filter(year == 2019) |>
  select(-year)
```

```{r}
#| eval: true
#| echo: false
french_speakers_2019 <- read_excel(path = here("data-raw", "german-and-french-speakers.xlsx"),
                                   sheet = "French speakers 2019")
```

:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: true
german_speakers_2019
```
:::

::: {.column width="50%"}

```{r}
#| echo: true
french_speakers_2019
```
:::

::::




# Joins {.inverse}


---

[![](assets/tidyexplain.png){fig-align="center"}](https://www.garrickadenbuie.com/project/tidyexplain/)


::: {.notes}
All of the animations and explanations used here come from the [tidyexplain project by Garrick Aden-Buie](https://www.garrickadenbuie.com/project/tidyexplain/).
:::


---

![](assets/original-dfs.png){fig-align="center"}
---

Join with variables in common in `x` and `y`

```{r}
#| eval: false
#| echo: true
type_of_join(x, y,
             join_by(id_variable))
```

::: {.fragment}
<br>
What if we don't have a variable with the same name in both data frames?

```{r}
#| eval: false
#| echo: true
type_of_join(x, y,
             join_by(id_variable_1 = id_variable_2))
```
:::


::: {.fragment}
<br>
What if we need to join on multiple variables with different names in both data frames?

```{r}
#| eval: false
#| echo: true
type_of_join(x, y,
             join_by(id_variable_1 = id_variable_2,
                     id_variable_3 = id_variable_4))
```
:::


## Types of Joins

- `left_join()`

- `right_join()`

- `full_join()`

- `semi_join()`

- `anti_join()`

## Which Join Should You Use?

![](assets/claus-wilke-left-join.png)


---


:::: {.columns}

::: {.column width="50%"}
**`left_join()`**

All rows from x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns.
:::

::: {.column width="50%"}
![](assets/left-join.gif)
:::

::::

## `left_join()`

```{r}
#| eval: false
#| echo: True
left_join(german_speakers_2019,
          french_speakers_2019,
          join_by(state))
```



```{r}
#| echo: false
left_join(german_speakers_2019,
          french_speakers_2019,
          join_by(state)) |> 
  paged_table()
```

---


:::: {.columns}

::: {.column width="50%"}
**`right_join()`**

All rows from y, and all columns from x and y. Rows in y with no match in x will have NA values in the new columns.
:::

::: {.column width="50%"}
![](assets/right-join.gif)
:::

::::

## `right_join()`

```{r}
#| eval: false
#| echo: True
right_join(german_speakers_2019,
           french_speakers_2019,
           join_by(state))
```



```{r}
#| echo: false
right_join(german_speakers_2019,
           french_speakers_2019,
           join_by(state)) |> 
  paged_table()
```

---


:::: {.columns}

::: {.column width="50%"}
**`full_join()`**

All rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing.
:::

::: {.column width="50%"}
![](assets/full-join.gif)
:::

::::

## `full_join()`

```{r}
#| eval: false
#| echo: True
full_join(german_speakers_2019,
          french_speakers_2019,
          join_by(state))
```



```{r}
#| echo: false
full_join(german_speakers_2019,
          french_speakers_2019,
          join_by(state)) |> 
  paged_table()
```

---


:::: {.columns}

::: {.column width="50%"}
**`semi_join()`**

All rows from x where there are matching values in y, keeping just columns from x.
:::

::: {.column width="50%"}
![](assets/semi-join.gif)
:::

::::

## `semi_join()`

```{r}
#| eval: false
#| echo: True
semi_join(german_speakers_2019,
          french_speakers_2019,
          join_by(state))
```



```{r}
#| echo: false
semi_join(german_speakers_2019,
          french_speakers_2019,
          join_by(state)) |> 
  paged_table()
```

---


:::: {.columns}

::: {.column width="50%"}
**`anti_join()`**

All rows from x where there are not matching values in y, keeping just columns from x.
:::

::: {.column width="50%"}
![](assets/anti-join.gif)
:::

::::

## `anti_join()`

```{r}
#| eval: false
#| echo: True
anti_join(german_speakers_2019,
          french_speakers_2019,
          join_by(state))
```



```{r}
#| echo: false
anti_join(german_speakers_2019,
          french_speakers_2019,
          join_by(state)) |> 
  paged_table()
```



## My Turn {.my-turn}

1. Download the `oregon-districts-and-schools.xlsx` file into the `data-raw` folder.

1. Import a new data frame called `oregon_districts_and_schools` from `oregon-districts-and-schools.xlsx`.

1. Merge the `oregon_districts_and_schools` data frame into the `third_grade_math_proficiency` data frame so I can see the names of the schools as well as associated districts.




## Your Turn {.your-turn}

1. Download the `oregon-districts.xlsx` file into the `data-raw` folder.

1. Import a new data frame called `oregon_districts` from `oregon-districts.xlsx`.

1. Merge the `oregon_districts` data frame into the `enrollment_by_race_ethnicity` data frame so you can see the names of the districts.


# Exporting Data {.inverse background-image="assets/ship-export.jpg"}

## `write_csv()`

```{r}
#| echo: true
#| eval: false
write_csv(french_and_german_speakers_2019,
          file = "data/french_and_german_speakers_2019.csv")
```

## `write_rds()`

```{r}
#| echo: true
#| eval: false
write_rds(french_and_german_speakers_2019,
          file = "data/french_and_german_speakers_2019.rds")
```

## My Turn {.my-turn}

1. Export my `third_grade_math_proficiency` data frame as a CSV.

1. Export my `third_grade_math_proficiency` data frame as an RDS file.

## Your Turn {.your-turn}

1. Make a `data` folder using the `dir_create()` function from the `fs` package. 

1. Export the `enrollment_by_race_ethnicity` data frame as an RDS file in the `data` folder.

# Data Visualization {.inverse}

# Best Practices in Data Visualization {.inverse}

---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}
::: {.notes}
https://www.nytimes.com/2023/10/04/climate/antarctic-sea-ice-record-low.html
:::


---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}

::: {.notes}
https://twitter.com/jburnmurdoch/status/1237737352879112194
:::


## Highlight {.has-bg-image background-image="assets/highlight.jpg"}

---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}

---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}

## Declutter {.has-bg-image background-image="assets/declutter.jpg"}


---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}

---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}

## Explain {.has-bg-image background-image="assets/explain.jpg"}


---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}

---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}

## Sparkle {.has-bg-image background-image="assets/sparkle.jpg"}

---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}

---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}

# Tidy Data {.has-bg-image background-image="assets/messy.jpg"}

## Can We Plot Untidy Data?

```{r}
#| echo: false
german_speakers_numeric <- read_excel(path = here("data-raw", "german-and-french-speakers.xlsx"),
                                      sheet = "German speakers",
                                      na = "-") |> 
  clean_names()
```


```{r}
#| echo: true
#| output: true
german_speakers_numeric
```

---

## Can We Plot Untidy Data?

```{r}
#| echo: true
#| output: true
german_speakers_numeric
```

<br>

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2"
ggplot(data = german_speakers_numeric,
       mapping = aes(x = ???, 
                     y = state)) +
  geom_col()
```



## Can We Plot Untidy Data?

```{r}
#| echo: true
german_speakers_tidy <- german_speakers_numeric |>
  pivot_longer(cols = -state,
               names_to = "year",
               values_to = "number") |>
  mutate(year = parse_number(year))
```

<br>

::: {.fragment}
```{r}
#| include: true
#| echo: true
german_speakers_tidy
```
:::


## Can We Plot Untidy Data?

```{r}
#| echo: true

ggplot(data = german_speakers_tidy,
       mapping = aes(x = number,
                     y = state)) +
  geom_col() +
  facet_wrap(~year)
```

# Pipe Data Into ggplot {.has-bg-image background-image="assets/pipes.jpg"}

## Pipe Data Into ggplot

```{r}
#| echo: true
penguins |> 
  filter(year == 2007) |> 
  count(island) 
```

## Pipe Data Into ggplot

```{r}
#| echo: true
penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = island)) +
  geom_col()
```

## Pipe Data Into ggplot

```{r}
#| echo: true
#| code-line-numbers: "2"
penguins |> 
  filter(year == 2008) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = island)) +
  geom_col()
```



## My Turn {.my-turn}

1. Create a new R script file.

1. Create a `data` directory using the `fs` package.

1. Download the third grade math proficiency data from the data wrangling section of the course into the `data` directory.

## My Turn, Continued {.my-turn}

4. Import the RDS file into a data frame called `third_grade_math_proficiency` and make a few modifications so it's easier to work with.

5. Make a plot by piping the third grade math proficiency data directly into ggplot.


## Your Turn {.your-turn}

1. Create a new R script file.

1. Download the enrollment data by race/ethnicity and create a data frame called `enrollment_by_race_ethnicity` using the starter code below.

1. Pipe your data into a bar chart that shows the breakdown of race/ethnicity among students in Beaverton SD 48J in 2022-2023.



# Highlight {.has-bg-image background-image="assets/highlight.jpg"}

# Reorder Plots to Highlight Findings {.has-bg-image background-image="assets/goya-cans.jpg"}

---

```{r}
#| echo: true
penguins |> 
  count(island)
```

::: {.fragment}
```{r}
#| echo: true
#| fig-height: 3
penguins |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = island)) +
  geom_col()
```
:::



---

```{r}
#| echo: true
#| code-line-numbers: "4"

penguins |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n))) +
  geom_col()
```

---

```{r}
#| echo: true
#| code-line-numbers: "3"

penguins |> 
  count(island) |> 
  mutate(island = fct_reorder(island, n)) |> 
  ggplot(aes(x = n,
             y = island)) +
  geom_col()
```





## My Turn {.my-turn}

1. Reorder my bar chart so that it shows schools with the highest proficiency rates at the top.

## Your Turn {.your-turn}

1. Make a bar chart that shows race/ethnicity in Beaverton SD 48J. As before, filter your data to only include 2022-2023 data and only include Beaverton SD 48J. Then, do the following:

1. Using the `reorder()` function, make a bar chart that shows the percent of race/ethnicity groups in descending order

1. Make the same bar chart using `mutate()` and `fct_reorder()` to reorder the race/ethnicity groups


# Line Charts {.has-bg-image background-image="assets/lines.jpg"}

---

```{r}
#| echo: true
penguins |> 
  count(year, island)
```


::: {.fragment}
```{r}
#| echo: true
#| fig-height: 2
penguins |> 
  count(year, island) |>
  ggplot(aes(x = year, 
             y = n)) +
  geom_line()
```
:::

---

```{r}
#| echo: true
penguins |> 
  count(year, island)
```

::: {.fragment}
```{r}
#| echo: true
#| code-line-numbers: "5"
#| fig-height: 2
penguins |> 
  count(year, island) |>
  ggplot(aes(x = year, 
             y = n,
             group = island)) +
  geom_line()
```
:::



## My Turn {.my-turn}

Make a line chart that shows the change in proficiency levels from 2018-2019 to 2021-2022

## Your Turn {.your-turn}

Make a line chart that shows the change in the Hispanic/Latino population in school districts from 2021-2022 to 2022-2023

# Use Color to Highlight Findings {.has-bg-image background-image="assets/color.jpg"}

---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}

---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}

---

```{r}
penguins |> 
  filter(year >= 2008) |> 
  mutate(year = as.character(year)) |> 
  group_by(island, year) |> 
  summarize(mean_bill_length = mean(bill_length_mm,
                                    na.rm = TRUE)) |> 
  ungroup() |> 
  ggplot(aes(x = year,
             y = mean_bill_length,
             group = island)) +
  geom_line() +
  theme_minimal()
```


---

```{r}
penguins |> 
  filter(year >= 2008) |> 
  mutate(year = as.character(year)) |> 
  group_by(island, year) |> 
  summarize(mean_bill_length = mean(bill_length_mm,
                                    na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(highlight_island = case_when(
    island == "Biscoe" ~ "Y",
    .default = "N"
  )) |> 
  ggplot(aes(x = year,
             y = mean_bill_length,
             color = highlight_island,
             group = island)) +
  geom_line() +
  scale_color_manual(values = c(
    "N" = "grey80",
    "Y" = "orange"
  )) +
  theme_minimal() +
  theme(legend.position = "none")
```

## Use Color to Highlight Findings

::: {.fragment}
<br>
**Data wrangling**

1. Figure out which line you want to highlight

1. Create variable to highlight this line
:::

::: {.fragment}
**Data visualization**

1. Use the `color` aesthetic property combined with `scale_color_manual()` to highlight line
:::

## My Turn {.my-turn}

Highlight a single school in my line chart that showed growth in math proficiency between 2018-2019 and 2021-2022

## Your Turn {.your-turn}

Highlight the district in your line chart that had the largest increase in its Hispanic/Latino population between 2021-2022 and 2022-2023

# Declutter {.has-bg-image background-image="assets/declutter.jpg"}

---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}

---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}

---

```{r}
penguins_bill_length_plot <-
  penguins |> 
  filter(year >= 2008) |> 
  mutate(year = as.character(year)) |> 
  group_by(island, year) |> 
  summarize(mean_bill_length = mean(bill_length_mm,
                                    na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(highlight_island = case_when(
    island == "Biscoe" ~ "Y",
    .default = "N"
  )) |> 
  ggplot(aes(x = year,
             y = mean_bill_length,
             color = highlight_island,
             group = island)) +
  geom_line() +
  scale_color_manual(values = c(
    "N" = "grey80",
    "Y" = "orange"
  )) 

penguins_bill_length_plot
```

## Complete Themes

Complete themes like `theme_minimal()` completely change the look and feel of plots

::: {.fragment}
```{r}
#| echo: true
#| fig-height: 4
penguins_bill_length_plot +
  theme_minimal()
```
:::

::: {.notes}
https://ggplot2.tidyverse.org/reference/ggtheme.html
:::



## `theme()` Function

The `theme()` function allows you to alter specific pieces of your plots.

::: {.fragment}
You usually use the `theme()` function after setting a complete theme.
:::


## `theme()` Function

```{r}
#| echo: true
#| code-line-numbers: "3"
penguins_bill_length_plot +
  theme_minimal() +
  theme(axis.title = element_blank())
```


## `theme()` Function

Within the `theme()` function, we need to figure out two pieces:

1. What part of the plot are we targeting?

1. What do we want to change on that part of the plot?

## Plot Parts

![](assets/theme-elements-henry-wang.png){fig-width="100%"}

## `element_` Functions

- `element_blank()`

- `element_rect()`

- `element_line()`

- `element_text()`

## `element_blank()`

```{r}
#| echo: true
#| fig-height: 2
penguins_bill_length_plot +
  theme_minimal()
```

::: {.fragment}
```{r}
#| echo: true
#| code-line-numbers: "3"
#| fig-height: 2
penguins_bill_length_plot +
  theme_minimal() +
  theme(axis.title = element_blank())
```
:::

## Remove Legends

```{r}
#| echo: true
#| code-line-numbers: "2"
penguins_bill_length_plot +
  theme(legend.position = "none")
```

## `element_rect()`

```{r}
#| echo: true
#| code-line-numbers: "3-5"
penguins_bill_length_plot +
  theme_minimal() +
  theme(plot.background = element_rect(fill = "blue",
                                       color = "orange",
                                       linewidth = 5))
```

## `element_rect()`

```{r}
#| echo: true
#| eval: false
element_rect(
  fill = NULL,
  colour = NULL,
  linewidth = NULL,
  linetype = NULL,
  color = NULL,
  inherit.blank = FALSE,
  size = deprecated()
)
```


## `element_line()`

```{r}
#| echo: true
#| code-line-numbers: "3-5"
penguins_bill_length_plot +
  theme_minimal() +
  theme(panel.grid.major = element_line(color = "blue"),
        panel.grid.minor = element_line(color = "red"))
```

## `element_line()`

```{r}
#| echo: true
#| eval: false
element_line(
  colour = NULL,
  linewidth = NULL,
  linetype = NULL,
  lineend = NULL,
  color = NULL,
  arrow = NULL,
  inherit.blank = FALSE,
  size = deprecated()
)
```

## `element_text()`

```{r}
#| echo: true
#| code-line-numbers: "3-6"
penguins_bill_length_plot +
  theme_minimal() +
  theme(axis.text = element_text(family = "Times New Roman",
                                 face = "bold",
                                 size = 20,
                                 color = "blue"))
```


## `element_text()`

```{r}
#| echo: true
#| eval: false
element_text(
  family = NULL,
  face = NULL,
  colour = NULL,
  size = NULL,
  hjust = NULL,
  vjust = NULL,
  angle = NULL,
  lineheight = NULL,
  color = NULL,
  margin = NULL,
  debug = NULL,
  inherit.blank = FALSE
)
```

## My Turn {.my-turn}

1. Remove the gray background

1. Remove axis titles

1. Remove the legend

1. Remove or minimize grid lines

::: {.notes}
- Talk about complete themes vs theme()
- Explain this lesson is about using theme()
- Show Henry Wang image
- Explain I'm just showing a few tweaks
:::

## Your Turn {.your-turn}

1. Remove the gray background

1. Remove axis titles

1. Remove the legend

1. Remove or minimize grid lines

# Explain {.has-bg-image background-image="assets/explain.jpg"}

---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}

::: {.notes}
Section is about using text to explain
:::

# Add Descriptive Labels to Your Plots {.inverse}

---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}

---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}

---

```{r}
penguins |> 
  filter(year >= 2008) |> 
  mutate(year = as.character(year)) |> 
  group_by(island, year) |> 
  summarize(mean_bill_length = mean(bill_length_mm,
                                    na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(highlight_island = case_when(
    island == "Biscoe" ~ "Y",
    .default = "N"
  )) |> 
  mutate(text_label = case_when(
    island == "Biscoe" & year == 2009 ~ str_glue("Average bill length
                                                 {number(mean_bill_length, accuracy = 0.1)} mm"),
    island == "Biscoe" & year == 2008 ~ number(mean_bill_length, accuracy = 0.1)
  )) |> 
  ggplot(aes(x = year,
             y = mean_bill_length,
             color = highlight_island,
             label = text_label,
             group = island)) +
  geom_line() +
  geom_text_repel(hjust = 0,
                  seed = 1234,
                  force = 25,
                  segment.color = "transparent",
                  direction = "x",
                  lineheight = 0.9) +
  scale_color_manual(values = c(
    "N" = "grey80",
    "Y" = "orange"
  )) +
  theme_minimal() +
  theme(axis.title = element_blank(),
        panel.grid = element_blank(),
        legend.position = "none")
```


## My Turn {.my-turn}

1. Add text labels to show the percentage of proficient students in my highlight school in each year

1. Format my axis text so it shows percentages

::: {.notes}
- Direct labeling
- Create text labels
- Show how to make all labels (https://show.rfor.us/rWJ5qnH3)
- Show ggrepel
- Axis text (either format it nicely or remove it)
:::

## Your Turn {.your-turn}

1. Add text labels to show the percentage of Hispanic/Latino students in the highlight district in each year

1. Format the axis text so it shows percentages


# Use Titles to Highlight Findings {.inverse}

---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}


---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}



## Add Descriptive Titles

```{r}
penguins |> 
  filter(year >= 2008) |> 
  mutate(year = as.character(year)) |> 
  group_by(island, year) |> 
  summarize(mean_bill_length = mean(bill_length_mm,
                                    na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(highlight_island = case_when(
    island == "Biscoe" ~ "Y",
    .default = "N"
  )) |> 
  mutate(text_label = case_when(
    island == "Biscoe" & year == 2009 ~ str_glue("Average bill length
                                                 {number(mean_bill_length, accuracy = 0.1)} mm"),
    island == "Biscoe" & year == 2008 ~ number(mean_bill_length, accuracy = 0.1)
  )) |> 
  ggplot(aes(x = year,
             y = mean_bill_length,
             color = highlight_island,
             label = text_label,
             group = island)) +
  geom_line() +
  geom_text_repel(hjust = 0,
                  seed = 1234,
                  force = 25,
                  segment.color = "transparent",
                  direction = "x",
                  lineheight = 0.9) +
  scale_color_manual(values = c(
    "N" = "grey80",
    "Y" = "orange"
  )) +
  labs(title = "Penguins on Biscoe island had the longest average bill length in 2008 and 2009") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        panel.grid = element_blank(),
        plot.title = element_text(face = "bold",
                                  size = 16),
        plot.title.position = "plot",
        legend.position = "none")
```

## Use Color in Titles to Highlight Findings

```{r}
penguins |> 
  filter(year >= 2008) |> 
  mutate(year = as.character(year)) |> 
  group_by(island, year) |> 
  summarize(mean_bill_length = mean(bill_length_mm,
                                    na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(highlight_island = case_when(
    island == "Biscoe" ~ "Y",
    .default = "N"
  )) |> 
  mutate(text_label = case_when(
    island == "Biscoe" & year == 2009 ~ str_glue("Average bill length
                                                 {number(mean_bill_length, accuracy = 0.1)} mm"),
    island == "Biscoe" & year == 2008 ~ number(mean_bill_length, accuracy = 0.1)
  )) |> 
  ggplot(aes(x = year,
             y = mean_bill_length,
             color = highlight_island,
             label = text_label,
             group = island)) +
  geom_line() +
  geom_text_repel(hjust = 0,
                  seed = 1234,
                  force = 25,
                  segment.color = "transparent",
                  direction = "x",
                  lineheight = 0.9) +
  scale_color_manual(values = c(
    "N" = "grey80",
    "Y" = "orange"
  )) +
  labs(title = "<b style='color: orange;'>Penguins on Biscoe island</b> had the longest average bill length in 2008 and 2009") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        panel.grid = element_blank(),
        plot.title = element_markdown(size = 16),
        plot.title.position = "plot",
        legend.position = "none")
```

## `ggtext`

::: {.fragment}
Add a *little* bit of HTML (not too much, I promise!)

```{r}
#| eval: false
#| echo: true
labs(title = "<b style='color: orange;'>Penguins on Biscoe island</b> 
     had the longest average bill length in 2008 and 2009")
```
:::

::: {.fragment}
And then tell ggplot to interpret the HTML correctly
```{r}
#| eval: false
#| echo: true
theme(plot.title = element_markdown())
```
:::





## My Turn {.my-turn}

1. Add a descriptive title to my plot

1. Use color strategically in my title using the `ggtext` package

1. Align my title all the way to the edge of the plot

::: {.notes}
- Use descriptive titles
- Use color in titles
- Show datawrapper articles
- ggtext
- span
- b
- i
- plot.title.position = "plot"
:::

## Your Turn {.your-turn}

1. Add a descriptive title to your plot

1. Use color strategically in your title using the `ggtext` package

1. Align your title all the way to the edge of the plot

# Use Annotations to Explain {.inverse}

---

![](assets/nyt-sea-ice-viz.png){fig-width="100%"}

---

![](assets/jbm-covid-plot.jpeg){fig-width="100%"}

---

![](assets/ft-annotation-example.jpeg){fig-width="100%"}



```{r}
penguins_plot_with_color_title <-
  penguins |> 
  filter(year >= 2008) |> 
  mutate(year = as.character(year)) |> 
  group_by(island, year) |> 
  summarize(mean_bill_length = mean(bill_length_mm,
                                    na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(highlight_island = case_when(
    island == "Biscoe" ~ "Y",
    .default = "N"
  )) |> 
  mutate(text_label = case_when(
    island == "Biscoe" & year == 2009 ~ str_glue("Average bill length
                                                 {number(mean_bill_length, accuracy = 0.1)} mm"),
    island == "Biscoe" & year == 2008 ~ number(mean_bill_length, accuracy = 0.1)
  )) |> 
  ggplot(aes(x = year,
             y = mean_bill_length,
             color = highlight_island,
             label = text_label,
             group = island)) +
  geom_line() +
  geom_text_repel(hjust = 0,
                  seed = 1234,
                  force = 25,
                  segment.color = "transparent",
                  direction = "x",
                  lineheight = 0.9) +
  scale_color_manual(values = c(
    "N" = "grey80",
    "Y" = "orange"
  )) +
  labs(title = "<b style='color: orange;'>Penguins on Biscoe island</b> had the longest average bill length in 2008 and 2009") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        panel.grid = element_blank(),
        plot.title = element_markdown(size = 16),
        plot.title.position = "plot",
        legend.position = "none")
```

## Use Annotations to Explain

```{r}
penguins_plot_with_color_title +
  annotate(geom = "text",
           x = "2009",
           y = 44,
           hjust = 0,
           lineheight = 0.9,
           color = "grey70",
           label = "Gray lines show\npenguins on other islands")
```

## Use Annotations to Explain

```{r}
#| echo: true
penguins_plot_with_color_title +
  annotate(geom = "text",
           x = "2009",
           y = 44,
           hjust = 0,
           lineheight = 0.9,
           color = "grey70",
           label = "Grey lines show\npenguins on other islands")
```


## My Turn {.my-turn}

1. Add an annotation to explain what the grey lines represent

::: {.notes}
- annotate() function
:::

## Your Turn {.your-turn}

1. Add an annotation to explain what the grey lines represent

# Make it Sparkle {.has-bg-image background-image="assets/sparkle.jpg"}

---

![](assets/default.gif){fig-width="100%"}




# Tweak Spacing {.inverse}

```{r}
penguins_plot_with_annotation <-
  penguins_plot_with_color_title +
  annotate(geom = "text",
           x = "2009",
           y = 44,
           hjust = 0,
           lineheight = 0.9,
           color = "grey70",
           label = "Grey lines show\npenguins on other islands")
```


## Tweak Spacing

```{r}
penguins_plot_with_annotation
```


## Tweak Spacing

```{r}
#| echo: true
#| code-line-numbers: "2"
penguins_plot_with_annotation +
  scale_x_discrete(expand = expansion(add = c(1, 1)))
```

## Tweak Spacing

```{r}
#| echo: true
#| code-line-numbers: "2"
penguins_plot_with_annotation +
  scale_x_discrete(expand = expansion(mult = c(1, 1)))
```

## Tweak Spacing

```{r}
#| echo: true
#| code-line-numbers: "2"
penguins_plot_with_annotation +
  scale_x_discrete(expand = expansion(add = c(0, 0.5)))
```

## Tweak Spacing

```{r}
#| echo: true
#| code-line-numbers: "2"
penguins_plot_with_annotation +
  scale_x_discrete(expand = expansion(mult = c(0, 0.5)))
```

## Tweak Spacing

```{r}
#| echo: true
#| code-line-numbers: "2"
penguins_plot_with_annotation +
  scale_y_continuous(expand = expansion(add = c(0, 10)))
```

## Tweak Spacing

```{r}
#| echo: true
#| code-line-numbers: "2"
penguins_plot_with_annotation +
  scale_y_continuous(expand = expansion(mult = c(0, 10)))
```


## My Turn {.my-turn}

1. Tweak spacing around my plot to remove unnecessary blank spaces

## Your Turn {.your-turn}

1. Tweak spacing around your plot to remove unnecessary blank spaces

# Customize Your Theme {.inverse}

## Customize Your Theme

```{r}
penguins_bar_chart <-
  penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n),
             fill = island)) +
  geom_col() +
  geom_text(aes(label = n),
            nudge_x = -2) +
  scale_fill_manual(values = c(
    "Dream" = "orange",
    "Biscoe" = "grey80",
    "Torgersen" = "grey80"
  )) +
  labs(title = "In 2007, Dream island had the most penguins of any island") +
  scale_x_continuous(expand = expansion(add = c(0.1, 0.5)))
```

```{r}
penguins_bar_chart
```

## Make a Custom Theme

```{r}
penguins_bar_chart <-
  penguins_bar_chart +
  labs(title = "In 2007, <b style='color: orange;'>Dream island</b> had the most penguins of any island")
```


```{r}
#| echo: true
penguins_bar_chart +
  theme_void() +
  theme(axis.text.y = element_text(),
        legend.position = "none",
        plot.title = element_markdown(size = 20),
        plot.title.position = "plot")
```

## Make a Custom Theme

```{r}
#| echo: true
theme_bar_chart <- function() {
  
  theme_void() +
    theme(axis.text.y = element_text(),
          legend.position = "none",
          plot.title = element_markdown(size = 20),
          plot.title.position = "plot")
  
}
```

## Make a Custom Theme

```{r}
#| echo: true
penguins_bar_chart +
  theme_bar_chart()
```




## My Turn {.my-turn}

1. Make a custom theme and apply it to my plot.

::: {.notes}
- theme_set()
:::

## Your Turn {.your-turn}

1. Make your own custom theme and apply it to your plot.

1. If you want to confirm that it works with other plots, copy it to another project and try it there.

# Customize Your Fonts {.inverse}

## Working with Custom Fonts in R

The `systemfonts` package makes custom fonts available to R.

::: {.fragment}
The `ragg` package enables ggplot to use these fonts when making plots.
:::

::: {.fragment}
Begin by installing both packages.
:::

## Viewing All Fonts

```{r}
#| echo: true
#| eval: false
library(systemfonts)

system_fonts()
```

## Rendering Plots in RStudio with Custom Fonts


![](assets/graphics-device.png)

## Saving Plots with Custom Fonts

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1,5"

library(ragg)

ggsave(plot = penguins_bar_chart,
       filename = "penguins_bar_chart.png",
       device = agg_png)
```


## Rendering Plots with Custom Fonts in Quarto Documents

```{yaml}
#| echo: true
#| eval: false
#| code-line-numbers: "4-6"
---
title: "My Report"
format: html
knitr:
  opts_chunk: 
    dev: ragg_png
---
```
  
## Where to Apply Custom Fonts: `geom_text()`
  
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "9"
penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n),
             fill = island,
             label = n)) +
  geom_col() +
  geom_text(family = "Papyrus") +
  labs(title = "My Amazing Penguins Chart")
```

---

```{r}
#| echo: false
penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n),
             fill = island,
             label = n)) +
  geom_col() +
  geom_text(family = "Papyrus") +
  labs(title = "My Amazing Penguins Chart")
```

## Where to Apply Custom Fonts: Complete Themes

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "11"
penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n),
             fill = island,
             label = n)) +
  geom_col() +
  geom_text(family = "Papyrus") +
  labs(title = "My Amazing Penguins Chart") +
  theme_minimal(base_family = "Papyrus")
```

---

```{r}
#| echo: false
#| code-line-numbers: "11"
penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n),
             fill = island,
             label = n)) +
  geom_col() +
  geom_text(family = "Papyrus") +
  labs(title = "My Amazing Penguins Chart") +
  theme_minimal(base_family = "Papyrus")
```

## Where to Apply Custom Fonts: `theme()`

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "12"
penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n),
             fill = island,
             label = n)) +
  geom_col() +
  geom_text(family = "Papyrus") +
  labs(title = "My Amazing Penguins Chart") +
  theme_minimal(base_family = "Papyrus") +
  theme(axis.text = element_text(family = "Inter"))
```

---

```{r}
#| echo: false
#| code-line-numbers: "12"
penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n),
             fill = island,
             label = n)) +
  geom_col() +
  geom_text(family = "Papyrus") +
  labs(title = "My Amazing Penguins Chart") +
  theme_minimal(base_family = "Papyrus") +
  theme(axis.text = element_text(family = "Inter"))
```



## My Turn {.my-turn}

1. Set my system up to use custom fonts using the `ragg` and `systemfonts` packages. 

1. Apply a custom font to my plot.

::: {.notes}
- family in geom_text()
- update_geom_defaults()
- 
:::

## Your Turn {.your-turn}

1. Set your system up to work with custom fonts using the `ragg` and `systemfonts` packages. 

1. Apply a custom font to your plot.

1. Save your plot using `ggsave()` and add your plot to a Quarto document to make sure it renders correctly there.

# Try New Plot Types {.inverse}

::: {.notes}
https://github.com/erikgahner/awesome-ggplot2
:::

## `waffle`

[![](assets/waffle-bars.png)](https://github.com/hrbrmstr/waffle)

## `ggbump`

[![](assets/bump-chart.png)](https://github.com/davidsjoberg/ggbump)

## `ggstream`

[![](assets/ggstream.png)](https://github.com/davidsjoberg/ggstream)

## `ggridges`

[![](assets/ggridges.png)](https://wilkelab.org/ggridges)

## `ggbeeswarm`

[![](assets/ggbeeswarm.png)](https://github.com/eclarke/ggbeeswarm)

## `gganimate`

[![](assets/claimsratio_2020_04_03.gif)](http://lenkiefer.com/2020/04/03/us-labor-market-update-april-2020/)

## `patchwork`

[![](assets/patchwork-twitter-post.png)](https://twitter.com/littlemissdata/status/1229176433123168256)

## `patchwork`

[![](assets/scherer-spotify.gif)](https://github.com/Z3tt/TidyTuesday#week-202004--spotify-songs-by-spotify-via-spotifyr)

## Your Turn {.your-turn}

1. Make a plot using a new (to you) geom. You can use the ones I've shown in this lesson or you can find more on the [Awesome ggplot2 GitHub repository](https://github.com/erikgahner/awesome-ggplot2).

1. If you come up with something you'd like to share, please email it to me at <david@rfortherestofus.com>.

# Advanced Markdown {.inverse background-image="assets/fancy-text.jpg"}

## Links

. . .

This is a [link to the Rest for the Rest of Us website](https://rfortherestofus.com/)

::: {.fragment}
```{markdown}
#| echo: true
This is a [link to the Rest for the Rest of Us website](https://rfortherestofus.com/)
```
:::

## Images

:::: {.columns}

::: {.column width="50%"}
![](assets/girl-meditating.jpg)
:::

::: {.column width="50%"}
::: {.fragment}
```{markdown}
#| echo: true
![](assets/girl-meditating.jpg)
```
:::
:::

::::





## Image Sizing



::: {.fragment}
Set the width of your images in pixels
```{markdown}
#| echo: true
![](assets/girl-meditating.jpg){width=300px}
```
:::



::: {.fragment}
Set the width of your images in inches
```{markdown}
#| echo: true
![](assets/girl-meditating.jpg){width=4in}
```
:::



::: {.fragment}
Set the width of your images as a percent
```{markdown}
#| echo: true
![](assets/girl-meditating.jpg){width=50%}
```
:::

## Image Alignment

Images are centered by default but you can change this.

::: {.fragment}
Align images to the left 
```{markdown}
#| echo: true
![](assets/girl-meditating.jpg){fig-align="left"}
```
:::

::: {.fragment}
Align images to the right 
```{markdown}
#| echo: true
![](assets/girl-meditating.jpg){fig-align="right"}
```
:::

::: {.fragment}
Center align images
```{markdown}
#| echo: true
![](assets/girl-meditating.jpg){fig-align="center"}
```
:::


## Captions

::: {.fragment}
```{markdown}
#| echo: true
![A girl meditating](assets/girl-meditating.jpg)
```
:::

## Alt Text

::: {.fragment}
```{markdown}
#| echo: true
![](assets/girl-meditating.jpg){fig-alt="A girl meditating"}
```
:::



## Blockquotes

And here is what Abraham Lincoln said:

::: {.fragment}
> Four score and seven years ago ...
:::


::: {.fragment}
```{markdown}
#| echo: true
> Four score and seven years ago ...
```
:::




## Footnotes

Here is some text.^[Here is a footnote]

## Footnotes

```{markdown}
#| echo: true
Here is some text.^[Here is a footnote]
```


## My Turn {.my-turn}

I'll create a Quarto document and do the following:

1. Add a link

1. Add an image and adjust its size, alignment, caption, and alt text

1. Add a blockquote

1. Add a footnote

## Your Turn {.your-turn}

- Create a Quarto document and add the Oregon Department of Education logo to the top of your report. You can find it at the [link below](https://raw.githubusercontent.com/rfortherestofus/going-deeper-v2/main/slides/assets/ode-logo.jpg).

- Add the following text (make sure you include the [link](https://www.oregon.gov/ode/pages/default.aspx), which is below):

::: {.fragment}
"This is a report for the [Oregon Department of Education](https://www.oregon.gov/ode/pages/default.aspx) on diversity in Oregon school districts." 
:::

## Your Turn, Continued {.your-turn}

- Add the following text as a block quote:

::: {.fragment}
> The Oregon Department of Education fosters equity and excellence for every learner through collaboration with educators, partners, and communities.
:::

- Add a [link to the source for mission statement](https://www.oregon.gov/ode/about-us/Pages/default.aspx) as a footnote.

# Tables {.inverse background-image="assets/table.jpg"}



## Tables Usually Need Wide Data

```{r}
third_grade_math_proficiency <- 
  read_rds(here("data/third_grade_math_proficiency.rds")) |> 
  select(academic_year, school, school_id, district, proficiency_level, number_of_students) |> 
  mutate(is_proficient = case_when(
    proficiency_level >= 3 ~ TRUE,
    .default = FALSE
  )) |> 
  group_by(academic_year, school, district, school_id, is_proficient) |> 
  summarize(number_of_students = sum(number_of_students, na.rm = TRUE)) |> 
  ungroup() |> 
  group_by(academic_year, school, district, school_id) |> 
  mutate(percent_proficient = number_of_students / sum(number_of_students, na.rm = TRUE)) |> 
  ungroup() |> 
  filter(is_proficient == TRUE) |> 
  select(academic_year, school, district, percent_proficient) |> 
  rename(year = academic_year) |> 
  mutate(percent_proficient = case_when(
    is.nan(percent_proficient) ~ NA,
    .default = percent_proficient
  )) |> 
  mutate(percent_proficient_formatted = percent(percent_proficient,
                                                accuracy = 1))
```

```{r}
data_long <- 
  third_grade_math_proficiency |> 
  filter(district == "Portland SD 1J") |> 
  filter(school %in% c("Abernethy Elementary School",
                       "Ainsworth Elementary School",
                       "Alameda Elementary School",
                       "Arleta Elementary School",
                       "Atkinson Elementary School")) |> 
  select(year, school, percent_proficient_formatted) |> 
  arrange(school)

data_long
```

. . .

```{r}
data_long |> 
  pivot_wider(id_cols = school,
              names_from = year,
              values_from = percent_proficient_formatted)
```

## `pivot_wider()`

```{r}
#| echo: true
data_long
```

. . .

```{r}
#| echo: true
#| code-line-numbers: "2-4"
data_long |> 
  pivot_wider(id_cols = school,
              names_from = year,
              values_from = percent_proficient_formatted)
```


## Don't Use the Default Output

![](assets/default-table-output.png){fig-width="100%"}


## Table Packages {.inverse background-image="assets/packages.jpg"} 

## `flextable` {.center-slide}

![](assets/flextable-logo.svg) 

## `gt` {.center-slide}

![](assets/gt-logo.svg)

## Interactive Tables with `gt` {.center-slide}

![](assets/gt-interactive.gif)

::: {.notes}
https://posit.co/blog/new-in-gt-0-9-0-interactive-tables/
:::

## My Turn {.my-turn}

I'll demonstrate making effective tables using `flextable` and `gt`.

::: {.notes}
- Set Names (cols_label)
- Align
- Column Width
- Formatting numbers
- Source
:::

## Your Turn {.your-turn}

- Copy the starter code below into RStudio and use it to make a table using `flextable` or `gt`.

- Work on adjusting your column names, column width, number formatting, and anything else you might want to try out.

# Advanced YAML and Code Chunk Options {.inverse background-image="assets/book.jpg"}

::: {.notes}
https://quarto.org/docs/reference/cells/cells-knitr.html
:::

## Table of Contents


::: {.fragment}
Add a table of contents

```{yaml}
#| echo: true
#| code-line-numbers: "3"
format: 
  html:
    toc: true
```
:::



::: {.fragment}
Choose how many levels of headings should be included in the table of contents
```{yaml}
#| echo: true
#| code-line-numbers: "4"
format: 
  html:
    toc: true
    toc-depth: 2
```
:::

::: {.fragment}
Choose the location for the table of contents
```{yaml}
#| echo: true
#| code-line-numbers: "5"
format: 
  html:
    toc: true
    toc-depth: 2
    toc-location: left
```
:::


## Set the Default Figure Width and Height

::: {.fragment}
```{yaml}
#| echo: true
#| code-line-numbers: "3-4"
format: 
  html:
    fig-width: 4
    fig-height: 6
```
:::

## Override Default Figure Width and Height 

::: {.fragment}
````
```{{r}}
#| fig-width: 3
#| fig-height: 5

penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n),
             fill = island,
             label = n)) +
  geom_col() +
  geom_text(family = "Papyrus") +
  labs(title = "My Amazing Penguins Chart") +
  theme_minimal(base_family = "Papyrus") +
  theme(axis.text = element_text(family = "Inter"))
```
````
:::

## Captions and Alt Text

::: {.fragment}
````
```{{r}}
#| fig-cap: A plot about penguins
#| fig-alt: A bar chart showing the number of penguins on each island

penguins |> 
  filter(year == 2007) |> 
  count(island) |> 
  ggplot(aes(x = n,
             y = reorder(island, n),
             fill = island,
             label = n)) +
  geom_col() +
  geom_text(family = "Papyrus") +
  labs(title = "My Amazing Penguins Chart") +
  theme_minimal(base_family = "Papyrus") +
  theme(axis.text = element_text(family = "Inter"))
```
````
:::

## My Turn {.my-turn}

1. Add a table of contents and adjust where it goes

1. Set default figure width and height

1. Change the figure width and height in an individual code chunk

1. Add a figure caption and alt text

## Your Turn {.your-turn}

Working in your Quarto document:

1. Add a table of contents and adjust where it goes

1. Set default figure width and height

1. Change the figure width and height in an individual code chunk

1. Add a figure caption and alt text

# Inline R Code {.inverse background-image="assets/inline-skating.jpg"}

::: {.notes}
The goal is to make everything reproducible, including text
:::

## Inline R Code

```{r}
oregon_school_districts <- 
  read_excel(here("data-raw/oregon-districts.xlsx")) |>  
  nrow()
```


These two lines of text look identical, right?

::: {.fragment}
There are 210 school districts in Oregon.
:::

::: {.fragment}
There are `r oregon_school_districts` school districts in Oregon.
:::

## Inline R Code

They're not identical!

::: {.fragment}
There are 210 school districts in Oregon.
:::

::: {.fragment}
```{markdown}
#| echo: true
#| code-line-numbers: false
There are `r oregon_school_districts` school districts in Oregon.
```
:::

## My Turn {.my-turn}

I'll add a line to my report that uses inline R code.

## Your Turn {.your-turn}

Add a line to your report that uses inline R code.

# Making Your Reports Shine: Word Edition {.inverse background-image="assets/microsoft-word.jpg"}

## Making Your Reports Shine: Word Edition

```{yaml}
#| echo: true
#| eval: false
#| code-line-numbers: "3"
format:
  docx:
    reference-doc: custom-reference-doc.docx
```


::: {.notes}
https://quarto.org/docs/output-formats/ms-word-templates.html
:::

## My Turn {.my-turn}

I'll use a reference document to change the look and feel of my report that is rendered to Word.

## Your Turn {.your-turn}

Use a reference document to change the look and feel of your report when rendered to Word.

# Making Your Reports Shine: PDF Edition {.inverse background-image="assets/report.jpg"}

::: {.notes}
You need to download Quarto 1.4

https://github.com/cscheid/2023-posit-conf-talk/blob/main/talk.qmd
:::

---

::: {.center-slide}
[![](assets/littlejohn-latex-tweet.png)](https://twitter.com/jefflittlejohn/status/1216869830726316033)
:::

---

::: {.center-slide}
[![](assets/heiss-latex-tweet.png)](https://twitter.com/andrewheiss/status/1204870408148832257)
:::

---

::: {.center-slide}
[![](assets/latex-table-tweet.png)](https://twitter.com/MattCowgill/status/1249190934392307712)
:::

---

::: {.center-slide}
[![](assets/latex-book-tweet.png)](https://twitter.com/thattommyhall/status/1248679614337241089)
:::

---

![](assets/typst.png){fig-align="center"}

## `typst`

- Very much in development now!

- To use it, you must install a [pre-release version of Quarto](https://quarto.org/docs/download/prerelease)

- Provides syntax to relatively easily adjust page size, margins, font size, etc.

## `typst`

```{yaml}
#| echo: true
---
format: 
  typst:
    papersize: us-letter
    mainfont: Inter
    fontsize: 20pt
margin:
  top: 5in
---
```


::: {.notes}
https://quarto.org/docs/prerelease/1.4/typst.html#typst-format
:::

## Page Breaks

. . .

```{markdown}
#| echo: true
{{< pagebreak >}}

# Header I want to go on the next page
```


## My Turn {.my-turn}

- Create a PDF document using the `typst` format

- Add page breaks to make my report easier to read

## Your Turn {.your-turn}

- Create a PDF document using the `typst` format

# Making Your Reports Shine: HTML Edition {.inverse background-image="assets/html.jpg"}

## Built-In Themes

[Quarto has a number of built-in themes](https://quarto.org/docs/output-formats/html-themes.html)

## Built-In Themes

```{yaml}
#| echo: true
#| code-line-numbers: "4"
title: "My Document"
format:
  html: 
    theme: cosmo
```

::: {.notes}
https://quarto.org/docs/output-formats/html-themes.html
:::

## Customizing Built-In Themes

:::: {.columns}

::: {.column width="50%"}
- `max-width`
- `mainfont`
- `fontsize`
- `fontcolor`
- `linkcolor`
:::

::: {.column width="50%"}
- `monofont`
- `monobackgroundcolor`
- `linestretch`
- `backgroundcolor`
- `margin-left`, `margin-right`, `margin-top`, `margin-bottom`
:::

::::

## Customizing Built-In Themes

```{yaml}
#| echo: true
#| code-line-numbers: "5-6"
title: "My Document"
format:
  html: 
    theme: cosmo
    mainfont: Inter
    fontsize: 20px
```


## Creating Your Own Theme

```{yaml}
#| echo: true
#| code-line-numbers: "4"
title: "My Document"
format:
  html: 
    theme: custom.scss
```

## Anatomy of a `.scss` File

```{scss}
#| echo: true
/*-- scss:defaults --*/

/*-- scss:rules --*/
```

## Anatomy of a `.scss` File

```{scss}
#| echo: true
#| code-line-numbers: "1-5"
/*-- scss:defaults --*/

$body-bg: red;
$body-color: white;
$font-size-root: 20px;

/*-- scss:rules --*/
```

::: {.notes}
Talk about Sass variables
https://quarto.org/docs/output-formats/html-themes.html#sass-variables
:::

## Anatomy of a `.scss` File

```{scss}
#| echo: true
#| code-line-numbers: "7-11"
/*-- scss:defaults --*/

$body-bg: red;
$body-color: white;
$font-size-root: 20px;

/*-- scss:rules --*/

h1 {
  text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);
}
```

## My Turn {.my-turn}

1. Apply a built-in HTML theme to my report. 

1. Customize the built-in HTML theme.

1. Create my own theme using an `.scss` file, Sass variables, and some custom CSS.

## Your Turn {.your-turn}

1. Apply a built-in HTML theme to your report. 

1. Customize the built-in HTML theme.

1. Create your own theme using an `.scss` file and Sass variables

1. If you know any CSS, customize your `.scss` file further.

# Presentations {.inverse background-image="assets/projector.jpg"}

## PowerPoint {.inverse}

::: {.notes}
Can use reference docs
:::

## Reference Documents

```{yaml}
#| echo: true
#| eval: false
#| code-line-numbers: "3"
format:
  docx:
    reference-doc: template.pptx
```

## Revealjs {.inverse}


::: {.notes}
https://quarto.org/docs/reference/formats/presentations/revealjs.html
:::

## Creating Slides

```{markdown}
#| echo: true
# Slide 1

Content on slide 1

## Slide 2

Content on slide 2
```

## Columns

```{markdown}
#| echo: true

:::: {.columns}

::: {.column width="50%"}
Content in column 1
:::

::: {.column width="50%"}
Content in column 2
:::

::::

```


::: {.fragment}

:::: {.columns}

::: {.column width="50%"}
Content in column 1
:::

::: {.column width="50%"}
Content in column 2
:::

::::

:::

## Incremental Reveal

- You can incrementally reveal

- content by putting it in a bulleted list

- and adding `incremental: true` to the YAML

::: {.fragment}
```{yaml}
#| echo: true
title: "My Presentation"
format:
  revealjs:
    incremental: true   
```
:::

## Incremental Reveal

- or surrounding content with an `incremental` div

::: {.fragment}
```{markdown}
#| echo: true

::: {.incremental}
- List item 1

- List item 2

- List item 3
:::
```
:::


## Adding Content to the Footer


```{yaml}
#| echo: true
#| code-line-numbers: "4-5"
---
format:
  revealjs:
    logo: logo.png
    footer: "Footer text"
---
```

::: {.notes}
Show https://quarto.org/docs/presentations/revealjs/#footer-logo
:::

## Slide Background Color {background-color="red"}

::: {.fragment}
```{markdown}
#| echo: true
## Slide Title {background-color="red"}
```
:::

## Slide Background Image {.inverse background-image="assets/kids-laughing.jpg"}

::: {.fragment}
```{markdown}
#| echo: true
## Slide Background Image {background-image="assets/kids-laughing.jpg"}
```
:::

## Revealjs Themes

- Revealjs has built-in themes

- There are also [custom Revealjs themes](https://quarto.org/docs/extensions/listing-revealjs.html)

- You can customize further using an `.scss` file

::: {.notes}
For more, see https://quarto.org/docs/presentations/revealjs/themes.html
:::

## Speaker Notes

- You can add speaker notes with the `.notes` class:

::: {.fragment}
```{markdown}
#| echo: true
::: {.notes}
This content is only visible to the speaker
:::
```
:::

## Speaker View

. . . 

Allows you to see:

- Speaker notes

- Upcoming slide

- Timer

## My Turn {.my-turn}

- Turn my report into a Revealjs presentation

- Demonstrate putting content in columns and using incremental reveal

- Adjust the look-and-feel of my presentation by adding a logo and footer text, adjusting slide backgrounds, and using a custom theme

- Demonstrate how to present using Revealjs slides

## Your Turn {.your-turn}

- Turn your report into a Revealjs presentation

- Put content in columns and using incremental reveal

- Adjust the look-and-feel of your presentation by adding a logo and footer text, adjusting slide backgrounds, and using a custom theme

- Practice presenting using Revealjs slides

# Dashboards {.inverse background-image="assets/dashboard.jpg"}

## Dashboards

```{yaml}
#| echo: true
---
title: "My Dashboard"
format: dashboard
---
```


::: {.notes}
https://quarto.org/docs/dashboards/
https://quarto.org/docs/dashboards/components.html
:::

## Dashboard Layout

- First-level headers make **pages**

- Second-level headers make **rows** or **columns**

- Code chunks make **cards**

## Dashboard Layout

- You can adjust the orientation in the YAML:

::: {.fragment}
```{yaml}
#| eval: false
#| echo: true
---
title: "My Dashboard"
format: 
  dashboard:
    orientation: columns
---
```
:::



::: {.notes}
https://quarto.org/docs/dashboards/layouts.html
:::

## Fill Versus Scroll

- By default, dashboard content will **fill** the space available on the screen

- You can also make your content **scroll** using the YAML

::: {.fragment}
```{yaml}
#| echo: true
#| code-line-numbers: "4"
title: "My Dashboard"
format: 
  dashboard:
    scrolling: true 
```
:::

## Navigation Bars

```{yaml}
#| echo: true
---
title: "My Dashboard"
format: dashboard
logo: "portland-public-schools-logo.svg"
---
```

## Sidebars

````{markdown}
#| echo: true
## {.sidebar}
````




## Themes

. . .

Exactly the same as HTML and Revealjs presentations:

- Custom themes

- You can customize further with `.scss` file

::: {.notes}
https://quarto.org/docs/dashboards/theming.html
:::

## My Turn {.my-turn}

- Turn my presentation into a dashboard

## Your Turn {.your-turn}

- Turn your presentation into a dashboard

# Websites {.inverse background-image="assets/website.jpg"}

## Websites

- To make a website, you need to create a new project

- You can create a website with a set of `.qmd` files and a `_quarto.yml` file to tie them all together

## `_quarto.yml`

. . .

```{yaml}
#| echo: true
project:
  type: website

website:
  title: "Portland Public Schools Math Proficiency"
  navbar:
    logo: "portland-public-schools-logo.svg"
    left:
      - href: index.qmd
        text: "Home"
      - href: about.qmd
        text: "About this Website"
  page-footer: 
    left: "Copyright 2023, Portland Public Schools" 

format: 
  html:
    theme: cosmo
    mainfont: "Inter"
```

## Render Your Website

- Render individual pages with the Render button

- Render the entire website with the Render Website button

## My Turn {.my-turn}

- Turn my dashboard into a website

## Your Turn {.your-turn}

- Turn your dashboard into a website

# Publishing Your Work {.inverse background-image="assets/publish.jpg"}

## Publishing Your Work

![](assets/quarto-publish.png)

## Netlify {.center-slide}

![](assets/netlify.png)

## My Turn {.my-turn}

. . .

I'll publish my website to Netlify

## Your Turn {.your-turn}

. . .

Publish your website to Netlify

# Quarto Extensions {.inverse background-image="assets/extension.jpg"}

::: {.notes}
- What they are
- Types
  - Shortcode/filter
  - Journal articles
  - Custom formats
  - Revealjs
- I've made a custom format for these slides
:::

## My Turn {.my-turn}

- Show two Quarto extensions: `lightbox` and `downloadthis`

## Your Turn {.your-turn}

- Try out a Quarto extension

# Parameterized Reporting {.inverse}

::: {.notes}
Make multiple reports at once
:::



## Why Parameterized Reporting?

1. Allows you to make multiple reports at once
1. Avoids copy paste issues if you were to make multiple reports by hand
1. It feels like magic!

::: {.notes}
Start by talking about reports at OCF
:::

## Parameterized Reports We Have Made {.inverse}

---

![](assets/ivac-country-report-angola.png){height=700, fig-align="center"}

---

![](assets/ivac-country-reports.png){height=700, fig-align="center"}

::: {.notes}
https://www.jhsph.edu/ivac/resources/pdpr/
:::


---

![](assets/psc.png)

::: {.notes}
Show webpage on screen while presenting
https://housingprofiles.pschousing.org/
:::

## How Does Parameterized Reporting Work? {.inverse}

---

![](assets/parameterized-reporting-overview.png){fig-align="center"}

::: {.notes}
Manually Create Multiple Reports

- Create new project
- Create Quarto document with manual filtering and manual text

Add Parameters to YAML

- Add parameters
- Filter dataset
- Inline R code
:::

## Your Turn {.your-turn}

. . .

I've created a starter project to help you. To install it:

1. Make sure you have the `usethis` package installed (if you don't, run `install.packages("usethis")` in the console).
1. Run the code provided in the console. Say yes to the prompts. This will download and open an RStudio project for you. 

## Your Turn {.your-turn}

```
usethis::use_course("https://github.com/rfortherestofus/going-deeper-parameterized-reporting/archive/refs/heads/main.zip")
```

## Your Turn {.your-turn}

3. Open the file called `report.qmd` and render it to see what it looks like. 
4. Add a parameter in your YAML for `continent` and set its value to Asia.

## Your Turn {.your-turn}

5. On line 19, change the code to filter the `gapminder` data using the `continent` parameter. 
6. On line 23, use inline R code to replace Asia with your `continent` parameter. 
7. Make sure you can render your report and have everything work exactly the same as when you first rendered. 


## Your Turn {.your-turn}

. . .

Your goal is to render your report on population in Asia using an R script file. To do so:

1. Open the file called `render-part-1.R`.
1. Replace all instances of TODO with the correct text.
1. Render your report.

::: {.notes}
Render with R Script

- With just `input` argument
- Adding `output_file` and `execute_params` arguments
:::


## Your Turn {.your-turn}

1. Open the file called `render-part-2.R`.
1. Replace all instances of TODO with the correct text.
1. Render your reports.

::: {.notes}
Render Multiple Reports with `quarto_render()`

- Show `quarto_render()` with one-row tibble
- Create `reports` tibble for all countries
- Render multiple reports with `pwalk()`
:::


